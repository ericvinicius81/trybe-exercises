// Parte I

// 1. Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// Modifique as concatena√ß√µes para template literals .
// Copie o c√≥digo abaixo.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = escopo => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
  // console.log(`${ifScope} o que estou fazendo aqui ? :O`); // Se necess√°rio esta linha pode ser removida.
};

testingScope(true);


// 2. Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// // Seu c√≥digo aqui.

// console.log(oddsAndEvens); // ser√° necess√°rio alterar essa linha üòâ

// https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/sort

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortNumbers = numbers => {
  const sort = numbers.sort((a, b) => a - b);
  return sort;
};

console.log(`Os n√∫meros  ${sortNumbers(oddsAndEvens)} se encontram ordenados de forma crescente!`);


// Parte II

// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let , const , arrow functions , template literals e ternary operator .

// 1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.

// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.

// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator .

const fatorial = number => {
  let value = 1;

  for (let index = 1; index <= number; index += 1) {
      value = value * index;
  }
  return value;
}

console.log(fatorial(4));


// const factorial = number => number > 1 ? number * factorial(number - 1) : 1;
// console.log(factorial(3));